#!/bin/bash

notify() {
  osascript <<EOF
              display notification "$2" with title "$1"
EOF
  echo "$2"
}

[[ $# < 3 ]] && \
  notify "Error" 'bin/make_appcast_item plist dsa_priv_key release_notes_file' \
  && \
    echo '
Usage:

bin/make_appcast_item $plist $dsa_priv_key $release_notes_file
' && \
  exit 1

PLIST=$1
DSA_PRIV_KEY=$2
RELEASE_NOTES_FILE=$3

VERSION=$(/usr/libexec/PlistBuddy -c "Print CFBundleShortVersionString" "${PLIST}")
OLD_VERSION=$(git tag | gsort -V | tail -1)

echo ""
echo "------------------------------------------------------------------------------------------"
echo " CutBox release... ${VERSION}"
echo "=========================================================================================="
echo " Make appcast item: ${VERSION} (upgrade from: ${OLD_VERSION}) "
echo ""
echo " Using private key: ${DSA_PRIV_KEY}"
echo ""
echo " Release Notes: "
echo "------------------------------------------------------------------------------------------"
cat ${RELEASE_NOTES_FILE}
echo "------------------------------------------------------------------------------------------"
echo " All ok? press [y] to continue..."

while :
do
  read -n 1 k <&1

  if [[ $k = "y" ]];then
    echo "..."
    break
  else
    echo ""
    echo "quitting..."
    exit 1
  fi
done

if [[ $4 != "FORCE" ]]; then
  if [[ "$VERSION" == "$OLD_VERSION" ]]; then
    echo "Already up to date"
    notify "Already up to date" "The published update matches the current CutBox version"
    exit 2
  fi
fi

BUILD_NUMBER=$(/usr/libexec/PlistBuddy -c "Print CFBundleVersion" "${PLIST}")

notify "Preparing Appcast.xml" "Fetching DMG version $VERSION"

wget https://github.com/ocodo/CutBox/releases/download/${VERSION}/CutBox.dmg

notify "Got CutBox.dmg" "$VERSION"

DMG_FILE="./CutBox.dmg"
DMG_LENGTH=$(ls -l "$DMG_FILE" | unexpand | tr -s ' ' | cut -d' ' -f5)
DSA_SIGNATURE=$(sign_update "$DMG_FILE" "$DSA_PRIV_KEY")

rm "$DMG_FILE"

RELEASE_NOTES_HTML="$( cat "${RELEASE_NOTES_FILE}" | cmark | tr -d "\n" )"

appcast_top=$(head -3 appcast.xml)
appcast_remaining=$(tail -n+4 appcast.xml)

echo "${appcast_top}
$(
  VERSION=$VERSION \
  DMG_LENGTH=$DMG_LENGTH \
  DSA_SIGNATURE=$DSA_SIGNATURE \
  DATE=$(date -R) \
  RELEASE_NOTES=$RELEASE_NOTES_HTML \
  mo appcast_item.mustache
)
${appcast_remaining}" > appcast.xml

bin/make_index $VERSION

notify "All set" "Committing and pushing appcast.xml"

git add .
git commit -m "$VERSION"
git push -u origin head
git tag $VERSION
git push --tags

notify "Appcast updated" "$VERSION"
