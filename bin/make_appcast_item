#!/bin/bash

notify() {
  osascript <<EOF
              display notification "$2" with title "$1"
EOF

  echo "$1"
  echo "$2"
}

if (( $# != 3 ))
then
  notify "Usage" "bin/make_appcast_item <plist> <dsa_priv_key> <release_notes_file>"
  exit 1
fi

PLIST=$1
DSA_PRIV_KEY=$2
RELEASE_NOTES_FILE=$3

VERSION=$(/usr/libexec/PlistBuddy -c "Print CFBundleShortVersionString" "${PLIST}")
OLD_VERSION=$(git tag | gsort -V | tail -1)

echo ""
echo "------------------------------------------------------------------------------------------"
echo " CutBox release... ${VERSION}"
echo "=========================================================================================="
echo " Make appcast item: ${VERSION} (upgrade from: ${OLD_VERSION}) "
echo ""
echo " Using private key: ${DSA_PRIV_KEY}"
echo ""
echo " Release Notes: "
echo "------------------------------------------------------------------------------------------"
cat "${RELEASE_NOTES_FILE}"
echo "------------------------------------------------------------------------------------------"
echo " !!!IMPORTANT --- THIS WILL TAG AND PUSH TO GIT ORIGIN!!! "
echo "------------------------------------------------------------------------------------------"
echo " Go ahead? press [y] to continue (any other to abort)"

while :
do
  read -rn 1 KEY <&1

  if [[ $KEY = "y" ]]
  then
    break
  else
    echo ""
    echo "quitting..."
    exit 1
  fi
done

if [[ -n $FORCE_APPCAST ]]
then
  if [[ "$VERSION" == "$OLD_VERSION" ]]
  then
    notify "Already up to date" "The published update matches the current CutBox version"
    exit 2
  fi
fi

IS_404=$(curl -s "https://github.com/cutbox/CutBox/releases/download/${VERSION}/CutBox.dmg" --write-out "%{http_code}")

if [[ "$IS_404" == "Not Found404" ]]
then
  notify "" "CutBox.dmg ${VERSION} not found (404)"
  exit 1
fi

notify "Preparing Appcast.xml" "Fetching DMG version $VERSION"
wget -q "https://github.com/cutbox/CutBox/releases/download/${VERSION}/CutBox.dmg"

notify "Got CutBox.dmg" "$VERSION"

DMG_FILE="./CutBox.dmg"
DMG_LENGTH=$(stat -f "%z" "$DMG_FILE")
DSA_SIGNATURE=$(sign_update "$DMG_FILE" "$DSA_PRIV_KEY")

rm "$DMG_FILE"

RELEASE_NOTES_HTML="$( cmark "${RELEASE_NOTES_FILE}" | tr -d "\n" )"

appcast_top=$(head -3 appcast.xml)
appcast_remaining=$(tail -n+4 appcast.xml)

echo "${appcast_top}
$(
  VERSION=$VERSION \
    DMG_LENGTH=$DMG_LENGTH \
    DSA_SIGNATURE=$DSA_SIGNATURE \
    DATE=$(date -R) \
    RELEASE_NOTES=$RELEASE_NOTES_HTML \
    mo appcast_item.mustache
)
${appcast_remaining}" > appcast.xml

bin/make_index "$VERSION"

if [[ -z "$DEBUG_APPCAST" ]]; then
  notify "All set" "Committing and pushing appcast.xml"

  git add .
  git commit -m "$VERSION"
  git push -u origin head
  git tag "$VERSION"
  git push --tags

  notify "Appcast updated" "$VERSION"
else
  notify "Dry run complete, rollback files in git" "$VERSION"
fi
